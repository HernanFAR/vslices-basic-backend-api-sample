<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VSlices.CrossCutting.Logging</name>
    </assembly>
    <members>
        <member name="T:VSlices.CrossCutting.Logging.Attributes.NoLoggableAttribute">
            <summary>
            Attribute to indicate that the class should not be logged
            </summary>
        </member>
        <member name="T:VSlices.CrossCutting.Logging.Configurations.ILoggingDescriber">
            <summary>
            Interface to describe the logging messages
            </summary>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.ILoggingDescriber.Initial">
            <summary>
            Message to log when the request is starting
            </summary>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.ILoggingDescriber.InitialWithoutProperties">
            <summary>
            Message to log when the request is starting, without properties
            </summary>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.ILoggingDescriber.Success">
            <summary>
            Message to log when the request is finishing with success
            </summary>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.ILoggingDescriber.SuccessWithoutProperties">
            <summary>
            Message to log when the request is finishing with success, without properties
            </summary>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.ILoggingDescriber.Failure">
            <summary>
            Message to log when the request is finishing with failure
            </summary>
        </member>
        <member name="T:VSlices.CrossCutting.Logging.Configurations.DefaultLoggingDescriber">
            <inheritdoc/>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.DefaultLoggingDescriber.Initial">
            <inheritdoc/>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.DefaultLoggingDescriber.InitialWithoutProperties">
            <inheritdoc/>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.DefaultLoggingDescriber.Success">
            <inheritdoc/>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.DefaultLoggingDescriber.SuccessWithoutProperties">
            <inheritdoc/>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.DefaultLoggingDescriber.Failure">
            <inheritdoc/>
        </member>
        <member name="T:VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration">
            <summary>
            Configuration for the <see cref="T:VSlices.CrossCutting.Logging.LoggingBehavior`2"/>
            </summary>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration.Describer">
            <summary>
            Describer to use for the logging messages
            </summary>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration.JsonOptions">
            <summary>
            Options to use for the serialization of the logging pipeline
            </summary>
        </member>
        <member name="P:VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration.SerializeAll">
            <summary>
            Indicates if the logging should be done for all the requests, even if the class is decorated with <see cref="T:VSlices.CrossCutting.Logging.Attributes.NoLoggableAttribute"/>
            </summary>
        </member>
        <member name="T:VSlices.CrossCutting.Logging.LoggingBehavior`2">
            <summary>
            Base logging behavior
            </summary>
            <remarks>Logs at start, successful end and failed end</remarks>
            <typeparam name="TRequest">The intercepted request to log about</typeparam>
            <typeparam name="TResponse">The expected successful response</typeparam>
        </member>
        <member name="M:VSlices.CrossCutting.Logging.LoggingBehavior`2.#ctor(Microsoft.Extensions.Logging.ILogger{`0},VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration)">
            <summary>
            Creates a new instance using the provided <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> and <see cref="T:VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration"/>
            </summary>
            <param name="logger">Logger</param>
            <param name="configuration">Configuration to use</param>
        </member>
        <member name="M:VSlices.CrossCutting.Logging.LoggingBehavior`2.HandleAsync(`0,VSlices.Core.Abstracts.Handlers.RequestHandlerDelegate{`1},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:VSlices.CrossCutting.Logging.LoggingBehavior`2.InitialHandling(`0)">
            <summary>
            Logs information about the request, at the start of request 
            </summary>
            <param name="request">Request to log about</param>
        </member>
        <member name="M:VSlices.CrossCutting.Logging.LoggingBehavior`2.SuccessHandling(VSlices.Core.Abstracts.Responses.Response{`1},`0)">
            <summary>
            Logs information about the request, only if it was successful
            </summary>
            <param name="response">Response to log about</param>
            <param name="request">Request to log about</param>
        </member>
        <member name="M:VSlices.CrossCutting.Logging.LoggingBehavior`2.FailureHandling(VSlices.Core.Abstracts.Responses.Response{`1},`0)">
            <summary>
            Logs information about the request, only if it failed
            </summary>
            <param name="response">Response to log about</param>
            <param name="request">Request to log about</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingExtensions.AddLoggingBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add the default logging behavior to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">Service collection</param>
            <param name="configAction">Setups the <see cref="T:VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration"/></param>
            <param name="lifetime">Service lifetime</param>
            <returns>Service collection</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingExtensions.AddLoggingBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add a custom logging behavior to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">Service collection</param>
            <param name="loggingBehaviorType">The specific logging behavior to add</param>
            <param name="configAction">Setups the <see cref="T:VSlices.CrossCutting.Logging.Configurations.LoggingConfiguration"/></param>
            <param name="lifetime">Service lifetime</param>
            <returns>Service collection</returns>
        </member>
    </members>
</doc>
