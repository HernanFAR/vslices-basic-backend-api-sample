<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VSlices.Core.Presentation.AspNetCore</name>
    </assembly>
    <members>
        <member name="T:VSlices.Core.Presentation.AspNetCore.AspNetCoreEndpointDefinition">
            <summary>
            Defines a endpoint of a use case without dependencies
            </summary>
            <remarks>If you need to specify dependencies, implement <see cref="T:VSlices.Core.Presentation.AspNetCore.IEndpointDefinition"/> too</remarks>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.AspNetCoreEndpointDefinition.DelegateHandler">
            <summary>
            The delegate executed when the endpoint is matched
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.AspNetCoreEndpointDefinition.Route">
            <summary>
            The route pattern
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.AspNetCoreEndpointDefinition.HttpMethod">
            <summary>
            HTTP method that the endpoint will match
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.AspNetCoreEndpointDefinition.SwaggerConfiguration">
            <summary>
            A swagger documentation definition for the endpoint
            </summary>
        </member>
        <member name="M:VSlices.Core.Presentation.AspNetCore.AspNetCoreEndpointDefinition.DefineEndpoint(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Presentation.AspNetCore.AspNetCoreEndpointDefinition.BuildRoute(Microsoft.AspNetCore.Builder.RouteHandlerBuilder)">
            <summary>
            Builds the route with the given route builder
            </summary>
            <remarks>By defaults, it adds the swagger configuration.</remarks>
            <param name="routeBuilder">RouteHandlerBuilder</param>
        </member>
        <member name="T:VSlices.Core.Presentation.AspNetCore.ISimpleEndpointDefinition">
            <summary>
            Defines a endpoint of a use case without dependencies
            </summary>
        </member>
        <member name="M:VSlices.Core.Presentation.AspNetCore.ISimpleEndpointDefinition.DefineEndpoint(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Defines the endpoint of the use case.
            </summary>
            <param name="builder">Endpoint route builder</param>
        </member>
        <member name="T:VSlices.Core.Presentation.AspNetCore.IEndpointDefinition">
            <summary>
            Defines an endpoint of a use case with dependencies
            </summary>
        </member>
        <member name="T:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation">
            <summary>
            Base class for Swagger documentation.
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.Name">
            <summary>
            The name of the endpoint
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.Tags">
            <summary>
            Tags associated with the endpoint
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.Summary">
            <summary>
            A short summary of what the endpoint does
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.Description">
            <summary>
            A longer description of what the endpoint does
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.MainConsumingContentType">
            <summary>
            The main content type that the endpoint consumes
            </summary>
            <remarks>Usually <see cref="F:System.Net.Mime.MediaTypeNames.Application.Json"/> if the endpoint is not a <see cref="P:System.Net.Http.HttpMethod.Get"/></remarks>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.OtherConsumingContentTypes">
            <summary>
            Other content types that the endpoint consumes
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.Responses">
            <summary>
            The responses that the endpoint can return
            </summary>
        </member>
        <member name="M:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.DefineSwaggerDocumentation(Microsoft.AspNetCore.Builder.RouteHandlerBuilder)">
            <summary>
            Defines the Swagger documentation for the endpoint
            </summary>
            <param name="routeBuilder"></param>
        </member>
        <member name="T:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.WithSingleton`1">
            <summary>
            Base class for Swagger documentation, with a singleton property
            </summary>
            <typeparam name="T">The type of the singleton instance. Must be a subclass of <see cref="T:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation"/></typeparam>
        </member>
        <member name="F:VSlices.Core.Presentation.AspNetCore.SwaggerDocumentation.WithSingleton`1.Instance">
            <summary>
            The singleton instance of the Swagger documentation
            </summary>
        </member>
        <member name="T:VSlices.Core.Presentation.AspNetCore.SwaggerResponse">
            <summary>
            A response that an endpoint can return
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerResponse.HttpStatusCode">
            <summary>
            The associated HTTP status code
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerResponse.Description">
            <summary>
            A description of when the response is returned
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerResponse.Type">
            <summary>
            The associated type to the response
            </summary>
        </member>
        <member name="P:VSlices.Core.Presentation.AspNetCore.SwaggerResponse.ContentTypes">
            <summary>
            The content types that the response can be
            </summary>
        </member>
        <member name="M:VSlices.Core.Presentation.AspNetCore.SwaggerResponse.WithStatusCode(System.Int32,System.String)">
            <summary>
            Creates a response without a type and content type, only a status code and description
            </summary>
            <param name="httpStatusCode">Associated HTTP status code</param>
            <param name="description">Optional description of when the response is returned</param>
            <returns>The created response with the given status code and description</returns>
        </member>
        <member name="T:VSlices.Core.Presentation.AspNetCore.SwaggerResponse.WithJson">
            <summary>
            Creates typed responses with a <see cref="F:System.Net.Mime.MediaTypeNames.Application.Json"/> content type.
            </summary>
        </member>
        <member name="M:VSlices.Core.Presentation.AspNetCore.SwaggerResponse.WithJson.Of``1(System.Int32,System.String)">
            <summary>
            Creates a typed response with a <see cref="F:System.Net.Mime.MediaTypeNames.Application.Json"/> content type, as well as a status code and description
            </summary>
            <typeparam name="T">The type of the response</typeparam>
            <param name="httpStatusCode">Associated HTTP status code</param>
            <param name="description">Optional description of when the response is returned</param>
            <returns>The created response with the given status code and description</returns>
        </member>
        <member name="M:VSlices.Core.Presentation.AspNetCore.SwaggerResponse.WithJson.OfProblemDetails(System.Int32,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Http.HttpValidationProblemDetails"/> response with a <see cref="F:System.Net.Mime.MediaTypeNames.Application.Json"/> content type, as well as a status code and description
            </summary>
            <param name="httpStatusCode">Associated HTTP status code</param>
            <param name="description">Optional description of when the response is returned</param>
            <returns>The created response with the given status code and description</returns>
        </member>
        <member name="M:VSlices.Core.Abstracts.Responses.ResponseExtensions.MatchEndpointResult``1(VSlices.Core.Abstracts.Responses.Response{``0},System.Func{``0,Microsoft.AspNetCore.Http.IResult})">
            <summary>
            Maps a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> to a <see cref="T:Microsoft.AspNetCore.Http.IResult"/>, using the provided function in success case.
            <para>It uses the <see href="https://datatracker.ietf.org/doc/html/rfc9457"/></para>
            </summary>
            <typeparam name="TSuccess">Return type in success</typeparam>
            <param name="result">Result</param>
            <param name="successFunc">Function to execute in </param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Http.IResult"/> of the use case</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:VSlices.Core.Abstracts.Responses.ValidationErrorArrayExtensions.ToDictionary(VSlices.Core.Abstracts.Responses.ValidationError[])">
            <summary>
            Converts a <see cref="T:VSlices.Core.Abstracts.Responses.ValidationError"/> array to a dictionary
            </summary>
            <param name="errors">Validation error array</param>
            <returns>A dictionary with the property name as key and the errors as values</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSimpleEndpointDefinition``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds an <see cref="T:VSlices.Core.Presentation.AspNetCore.ISimpleEndpointDefinition"/> to the service collection.
            </summary>
            <typeparam name="T">The simple endpoint definition to be added</typeparam>
            <param name="services">Service collection</param>
            <param name="lifetime">Lifetime of the <see cref="T:VSlices.Core.Presentation.AspNetCore.ISimpleEndpointDefinition"/> </param>
            <returns>Service collection</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddEndpointDefinition``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds an <see cref="T:VSlices.Core.Presentation.AspNetCore.IEndpointDefinition"/> as <see cref="T:VSlices.Core.Presentation.AspNetCore.ISimpleEndpointDefinition"/> (as well of specified dependencies) to the service collection.
            </summary>
            <typeparam name="T">The endpoint definition to be added</typeparam>
            <param name="services">Service collection</param>
            <param name="lifetime">Lifetime of the <see cref="T:VSlices.Core.Presentation.AspNetCore.ISimpleEndpointDefinition"/> </param>
            <returns>Service collection</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddEndpointDefinitionsFromAssemblyContaining``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Scan a specified assembly for <see cref="T:VSlices.Core.Presentation.AspNetCore.IEndpointDefinition"/> implementations and adds as <see cref="T:VSlices.Core.Presentation.AspNetCore.ISimpleEndpointDefinition"/> (as well of specified dependencies) to the service collection.
            </summary>
            <param name="services">Service collection</param>
            <param name="lifetime">Lifetime of the <see cref="T:VSlices.Core.Presentation.AspNetCore.ISimpleEndpointDefinition"/></param>
            <typeparam name="TAnchor">Assembly to Scan</typeparam>
            <returns>Service collection</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
    </members>
</doc>
