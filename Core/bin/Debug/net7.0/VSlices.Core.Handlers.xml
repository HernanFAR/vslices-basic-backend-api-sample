<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VSlices.Core.Handlers</name>
    </assembly>
    <members>
        <member name="T:VSlices.Core.Handlers.CreateHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand`1"/> that creates entities.
            </summary>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
            <typeparam name="TEntity">The entity to create</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.CreateHandler`3.#ctor(VSlices.Core.DataAccess.Abstracts.ICreateRepository{`2})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.ICreateRepository`1"/>
            </summary>
            <param name="repository">Repository with create function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.CreateHandler`3.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.CreateHandler`3.ValidateFeatureRulesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the use case rules
            </summary>
            <param name="request">The request to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="M:VSlices.Core.Handlers.CreateHandler`3.CreateEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates the entity to be persisted
            </summary>
            <param name="request">The request to convert</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TEntity"/> in</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.CreateHandler`3.AfterCreationAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Represents actions to be executed after the entity is created
            </summary>
            <param name="entity">Related Entity</param>
            <param name="request">Related Request</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.CreateHandler`3.GetResponseAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Creates the response to be returned
            </summary>
            <param name="entity">The created entity</param>
            <param name="request">The handled request</param>
            <param name="cancellationToken"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TResponse"/> in representing the asynchronous operation
            </returns>
        </member>
        <member name="T:VSlices.Core.Handlers.EntityValidatedCreateHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand`1"/> that validate entities, before create them
            </summary>
            <remarks>Useful to implement always valid entities</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
            <typeparam name="TEntity">The entity to create</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedCreateHandler`3.#ctor(VSlices.Core.DataAccess.Abstracts.ICreateRepository{`2})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.ICreateRepository`1"/>
            </summary>
            <param name="repository">Repository with create function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedCreateHandler`3.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedCreateHandler`3.ValidateFeatureRulesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the use case rules
            </summary>
            <param name="request">The request to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedCreateHandler`3.CreateEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates the entity to be persisted
            </summary>
            <param name="request">The request to convert</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TEntity"/> in</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedCreateHandler`3.ValidateEntityAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Validates the before created entity
            </summary>
            <param name="entity">The created entity</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1" /> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the process</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedCreateHandler`3.AfterCreationAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Represents actions to be executed after the entity is created
            </summary>
            <param name="entity">Related Entity</param>
            <param name="request">Related Request</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedCreateHandler`3.GetResponseAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Creates the response to be returned
            </summary>
            <param name="entity">The created entity</param>
            <param name="request">The handled request</param>
            <param name="cancellationToken"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TResponse"/> in representing the asynchronous operation
            </returns>
        </member>
        <member name="T:VSlices.Core.Handlers.CreateHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand"/> that creates entities.
            </summary>
            <remarks>Useful in commands without specific response</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TEntity">The entity to create</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.CreateHandler`2.#ctor(VSlices.Core.DataAccess.Abstracts.ICreateRepository{`1})">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.CreateHandler`2.GetResponseAsync(`1,`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.EntityValidatedCreateHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand"/> that validates entities, before create them
            </summary>
            <remarks>Useful in commands without specific response and to implement always-valid entities</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TEntity">The entity to create</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedCreateHandler`2.#ctor(VSlices.Core.DataAccess.Abstracts.ICreateRepository{`1})">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedCreateHandler`2.GetResponseAsync(`1,`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.ReadHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.IQuery`1"/> that reads data
            </summary>
            <typeparam name="TRequest">The query to handle</typeparam>
            <typeparam name="TSearchOptions">The options to complete the read process</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.ReadHandler`3.#ctor(VSlices.Core.DataAccess.Abstracts.IReadRepository{`2,`1})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IReadRepository`2"/>
            </summary>
            <param name="repository">Repository with read function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.ReadHandler`3.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.ReadHandler`3.ValidateFeatureRulesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the use case rules
            </summary>
            <param name="request">The request to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="M:VSlices.Core.Handlers.ReadHandler`3.RequestToSearchOptionsAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Converts the <typeparamref name="TRequest"/> to <typeparamref name="TSearchOptions"/>
            </summary>
            <param name="request">The request to convert</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <typeparamref name="TSearchOptions"/></returns>
        </member>
        <member name="T:VSlices.Core.Handlers.ReadHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.IQuery`1"/> that reads data.
            </summary>
            <typeparam name="TRequest">The query to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.ReadHandler`2.#ctor(VSlices.Core.DataAccess.Abstracts.IReadRepository{`1,`0})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IReadRepository`2"/>
            </summary>
            <param name="repository">Repository with read function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.ReadHandler`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.ReadHandler`2.ValidateFeatureRulesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the use case rules
            </summary>
            <param name="request">The request to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>>
        </member>
        <member name="T:VSlices.Core.Handlers.BasicReadHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.IQuery`1"/> that reads basic data.
            </summary>
            <typeparam name="TRequest">The query to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.BasicReadHandler`2.#ctor(VSlices.Core.DataAccess.Abstracts.IReadRepository{`1})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IReadRepository`1"/>
            </summary>
            <param name="repository">Repository with read function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.BasicReadHandler`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.BasicReadHandler`2.ValidateFeatureRulesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the use case rules
            </summary>
            <param name="request">The request to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="T:VSlices.Core.Handlers.RemoveHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand`1"/> that removes entities.
            </summary>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
            <typeparam name="TEntity">The entity to remove</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.RemoveHandler`3.#ctor(VSlices.Core.DataAccess.Abstracts.IRemoveRepository{`2})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IRemoveRepository`1"/>
            </summary>
            <param name="repository">Repository with remove function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.RemoveHandler`3.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.RemoveHandler`3.ValidateFeatureRulesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the use case rules
            </summary>
            <param name="request">The request to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="M:VSlices.Core.Handlers.RemoveHandler`3.GetAndProcessEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets and process the entity to be removed
            </summary>
            <param name="request">The request to convert</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TEntity"/> in</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.RemoveHandler`3.AfterRemoveAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Represents actions to be executed after the entity is removed
            </summary>
            <param name="entity">Related Entity</param>
            <param name="request">Related Request</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.RemoveHandler`3.GetResponseAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Creates the response to be returned
            </summary>
            <param name="entity">The removed entity</param>
            <param name="request">The handled request</param>
            <param name="cancellationToken"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TResponse"/> in representing the asynchronous operation
            </returns>
        </member>
        <member name="T:VSlices.Core.Handlers.EntityValidatedRemoveHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand`1"/> that validate entities, before remove them
            </summary>
            <remarks>Useful to implement always valid entities</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
            <typeparam name="TEntity">The entity to create</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedRemoveHandler`3.#ctor(VSlices.Core.DataAccess.Abstracts.IRemoveRepository{`2})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IRemoveRepository`1"/>
            </summary>
            <param name="repository">Repository with remove function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedRemoveHandler`3.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedRemoveHandler`3.ValidateFeatureRulesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the use case rules
            </summary>
            <param name="request">The request to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedRemoveHandler`3.GetAndProcessEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets and process the entity to be persisted
            </summary>
            <param name="request">The request to convert</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TEntity"/> in</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedRemoveHandler`3.ValidateEntityAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Validates the before processed entity
            </summary>
            <param name="entity">The created entity</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedRemoveHandler`3.AfterRemoveAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Represents actions to be executed after the entity is removed
            </summary>
            <param name="entity">Related Entity</param>
            <param name="request">Related Request</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedRemoveHandler`3.GetResponseAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Creates the response to be returned
            </summary>
            <param name="entity">The removed entity</param>
            <param name="request">The handled request</param>
            <param name="cancellationToken"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TResponse"/> in representing the asynchronous operation
            </returns>
        </member>
        <member name="T:VSlices.Core.Handlers.RemoveHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand"/> that removes entities.
            </summary>
            <remarks>Useful in commands without response</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TEntity">The entity to remove</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.RemoveHandler`2.#ctor(VSlices.Core.DataAccess.Abstracts.IRemoveRepository{`1})">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.RemoveHandler`2.GetResponseAsync(`1,`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.EntityValidatedRemoveHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand"/> that validates entities, before remove them
            </summary>
            <remarks>Useful in commands without response and to implement always-valid entities</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TEntity">The entity to remove</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedRemoveHandler`2.#ctor(VSlices.Core.DataAccess.Abstracts.IRemoveRepository{`1})">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedRemoveHandler`2.GetResponseAsync(`1,`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.UpdateHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand`1"/> that update entities.
            </summary>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
            <typeparam name="TEntity">The entity to update</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.UpdateHandler`3.#ctor(VSlices.Core.DataAccess.Abstracts.IUpdateRepository{`2})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IUpdateRepository`1"/>
            </summary>
            <param name="repository">Repository with update function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.UpdateHandler`3.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.UpdateHandler`3.ValidateFeatureRulesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the use case rules
            </summary>
            <param name="request">The request to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="M:VSlices.Core.Handlers.UpdateHandler`3.GetAndProcessEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets and process the entity to be updated
            </summary>
            <param name="request">The request to convert</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TEntity"/> in</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.UpdateHandler`3.AfterUpdateAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Represents actions to be executed after the entity is updated
            </summary>
            <param name="entity">Related Entity</param>
            <param name="request">Related Request</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.UpdateHandler`3.GetResponseAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Creates the response to be returned
            </summary>
            <param name="entity">The updated entity</param>
            <param name="request">The handled request</param>
            <param name="cancellationToken"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TResponse"/> in representing the asynchronous operation
            </returns>
        </member>
        <member name="T:VSlices.Core.Handlers.EntityValidatedUpdateHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand`1"/> that validates entities, before update them
            </summary>
            <remarks>Useful to implement always valid entities</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
            <typeparam name="TEntity">The entity to update</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedUpdateHandler`3.#ctor(VSlices.Core.DataAccess.Abstracts.IUpdateRepository{`2})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IUpdateRepository`1"/>
            </summary>
            <param name="repository">Repository with update function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedUpdateHandler`3.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedUpdateHandler`3.ValidateFeatureRulesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the use case rules
            </summary>
            <param name="request">The request to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedUpdateHandler`3.GetAndProcessEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets and process the entity to be persisted
            </summary>
            <param name="request">The request to convert</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TEntity"/> in</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedUpdateHandler`3.ValidateEntityAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Validates the before processed entity
            </summary>
            <param name="entity">The created entity</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> holding a <see cref="T:VSlices.Core.Abstracts.Responses.Response`1"/> of <see cref="T:VSlices.Core.Abstracts.Responses.Success"/> that represents the result of the operation </returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedUpdateHandler`3.AfterUpdateAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Represents actions to be executed after the entity is updated
            </summary>
            <param name="entity">Related Entity</param>
            <param name="request">Related Request</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation</returns>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedUpdateHandler`3.GetResponseAsync(`2,`0,System.Threading.CancellationToken)">
            <summary>
            Creates the response to be returned
            </summary>
            <param name="entity">The updated entity</param>
            <param name="request">The handled request</param>
            <param name="cancellationToken"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <typeparamref name="TResponse"/> in representing the asynchronous operation
            </returns>
        </member>
        <member name="T:VSlices.Core.Handlers.UpdateHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand"/> that updates entities.
            </summary>
            <remarks>Useful in commands without response</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TEntity">The entity to update</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.UpdateHandler`2.#ctor(VSlices.Core.DataAccess.Abstracts.IUpdateRepository{`1})">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.UpdateHandler`2.GetResponseAsync(`1,`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.EntityValidatedUpdateHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand"/> that validates entities, before update them
            </summary>
            <remarks>Useful in commands without response and to implement always-valid entities</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TEntity">The entity to update</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedUpdateHandler`2.#ctor(VSlices.Core.DataAccess.Abstracts.IUpdateRepository{`1})">
            <inheritdoc />
        </member>
        <member name="M:VSlices.Core.Handlers.EntityValidatedUpdateHandler`2.GetResponseAsync(`1,`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
    </members>
</doc>
