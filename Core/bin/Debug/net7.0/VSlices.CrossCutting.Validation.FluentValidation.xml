<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VSlices.CrossCutting.Validation.FluentValidation</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Extensions.DependencyInjection.ValidationExtensions.AddFluentValidationBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds the FluentValidationBehavior to the pipeline.
            </summary>
            <param name="services">Service collection</param>
            <param name="lifetime">Service lifetime</param>
            <returns>Service collection</returns>
        </member>
        <member name="T:VSlices.CrossCutting.Validation.FluentValidation.FluentValidationBehavior`2">
            <summary>
            A validation behavior that uses FluentValidation
            </summary>
            <typeparam name="TRequest">The intercepted request to validate</typeparam>
            <typeparam name="TResponse">The expected successful response</typeparam>
        </member>
        <member name="M:VSlices.CrossCutting.Validation.FluentValidation.FluentValidationBehavior`2.#ctor(System.Collections.Generic.IEnumerable{FluentValidation.IValidator{`0}})">
            <summary>
            Creates a new instance using the validators registered in the container
            </summary>
            <remarks>Even if a <see cref="T:System.Collections.Generic.IEnumerable`1"/> is used here, only the first validator will be used</remarks>
            <param name="requestValidators">Validators registered</param>
        </member>
        <member name="M:VSlices.CrossCutting.Validation.FluentValidation.FluentValidationBehavior`2.ValidateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
    </members>
</doc>
