<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VSlices.Core.Events.Publisher.Reflection</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Extensions.DependencyInjection.ReflectionPublisherExtensions.AddReflectionPublisher(Microsoft.Extensions.DependencyInjection.IServiceCollection,VSlices.Core.Events.Publisher.Reflection.Strategies.IPublishingStrategy)">
            <summary>
            Add a reflection <see cref="T:VSlices.Core.Abstracts.Events.IPublisher"/> implementation to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <remarks>Default strategy is <see cref="T:VSlices.Core.Events.Publisher.Reflection.Strategies.AwaitInParallelStrategy"/></remarks>
            <param name="services">Service Collection</param>
            <param name="strategy">Strategy</param>
            <returns>Service Collection</returns>
        </member>
        <member name="T:VSlices.Core.Events.Publisher.Reflection.ReflectionPublisher">
            <summary>
            Sends a request through the VSlices pipeline to be handled by a many handlers, using reflection
            </summary>
        </member>
        <member name="M:VSlices.Core.Events.Publisher.Reflection.ReflectionPublisher.#ctor(System.IServiceProvider,VSlices.Core.Events.Publisher.Reflection.Strategies.IPublishingStrategy)">
            <summary>
            Creates a new instance of <see cref="T:VSlices.Core.Events.Publisher.Reflection.ReflectionPublisher"/>
            </summary>
            <param name="serviceProvider"><see cref="T:System.IServiceProvider"/> used to resolve handlers</param>
            <param name="strategy">Strategy</param>
        </member>
        <member name="M:VSlices.Core.Events.Publisher.Reflection.ReflectionPublisher.PublishAsync(VSlices.Core.Abstracts.Requests.IEvent,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Events.Publisher.Reflection.Strategies.AwaitForEachStrategy">
            <summary>
            A publishing strategy that awaits each handler in sequence.
            </summary>
        </member>
        <member name="M:VSlices.Core.Events.Publisher.Reflection.Strategies.AwaitForEachStrategy.HandleAsync``1(VSlices.Core.Abstracts.Handlers.RequestHandlerDelegate{``0}[])">
            <summary>
            Handles the given handlers in parallel using for each.
            </summary>
            <typeparam name="TResponse">Expected response</typeparam>
            <param name="handlerDelegates">Request Handlers</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:VSlices.Core.Events.Publisher.Reflection.Strategies.AwaitInParallelStrategy">
            <summary>
            A publishing strategy that awaits all handlers in parallel.
            </summary>
        </member>
        <member name="M:VSlices.Core.Events.Publisher.Reflection.Strategies.AwaitInParallelStrategy.HandleAsync``1(VSlices.Core.Abstracts.Handlers.RequestHandlerDelegate{``0}[])">
            <summary>
            Handles the given handlers in parallel using <see cref="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})"/>.
            </summary>
            <typeparam name="TResponse">Expected response</typeparam>
            <param name="handlerDelegates">Request Handlers</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:VSlices.Core.Events.Publisher.Reflection.Strategies.IPublishingStrategy">
            <summary>
            Defines a publishing strategy for the <see cref="T:VSlices.Core.Abstracts.Events.IPublisher"/>.
            </summary>
        </member>
        <member name="M:VSlices.Core.Events.Publisher.Reflection.Strategies.IPublishingStrategy.HandleAsync``1(VSlices.Core.Abstracts.Handlers.RequestHandlerDelegate{``0}[])">
            <summary>
            Handles the execution of the <see cref="T:VSlices.Core.Abstracts.Handlers.IHandler`2"/>'s related to the event
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="handlerDelegates"></param>
            <returns></returns>
        </member>
    </members>
</doc>
