<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VSlices.Domain</name>
    </assembly>
    <members>
        <member name="T:VSlices.Domain.EntityAbstractions">
            <summary>
            A static class that contains abstractions for classes that can't implement <see cref="T:VSlices.Domain.Entity"/>.
            </summary>
        </member>
        <member name="M:VSlices.Domain.EntityAbstractions.EntityToString(VSlices.Domain.IEntity)">
            <summary>
            An abstraction that returns a string representation of a <see cref="T:VSlices.Domain.IEntity"/> instance, used in <see cref="M:VSlices.Domain.Entity.ToString"/>"/>
            </summary>
            <param name="this">Entity</param>
            <returns>String representation of the instance</returns>
        </member>
        <member name="M:VSlices.Domain.EntityAbstractions.EntityEqualsTo(VSlices.Domain.IEntity,VSlices.Domain.IEntity)">
            <summary>
            An abstraction that performs a key-value comparision between two <see cref="T:VSlices.Domain.IEntity"/> instances, used in <see cref="M:VSlices.Domain.Entity.EntityEquals(VSlices.Domain.IEntity)"/>"/>
            </summary>
            <param name="this">Entity</param>
            <param name="other">Entity</param>
            <returns>true if the entities are the sames, false if not</returns>
        </member>
        <member name="T:VSlices.Domain.IEntity">
            <summary>
            Defines an entity with non specified keys
            </summary>
        </member>
        <member name="M:VSlices.Domain.IEntity.GetKeys">
            <summary>
            Gets the keys of the entity
            </summary>
            <returns>A array with the keys of the entity</returns>
        </member>
        <member name="M:VSlices.Domain.IEntity.EntityEquals(VSlices.Domain.IEntity)">
            <summary>
            Performs a identity check between two entities
            </summary>
            <param name="other">The other entity to </param>
            <returns>true if is equal, false if not</returns>
        </member>
        <member name="T:VSlices.Domain.Entity">
            <summary>
            Base entity with non specified keys
            </summary>
            <remarks>Provides a better <see cref="M:VSlices.Domain.Entity.ToString"/> implementation, aside of a <see cref="M:VSlices.Domain.Entity.GetKeys"/> and an <see cref="M:VSlices.Domain.Entity.EntityEquals(VSlices.Domain.IEntity)"/> method</remarks>
        </member>
        <member name="M:VSlices.Domain.Entity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:VSlices.Domain.Entity.GetKeys">
            <inheritdoc/>
        </member>
        <member name="M:VSlices.Domain.Entity.EntityEquals(VSlices.Domain.IEntity)">
            <inheritdoc/>
        </member>
        <member name="T:VSlices.Domain.Entity`1">
            <summary>
            Base entity with a strong typed key
            </summary>
            <remarks>Provides a better <see cref="M:VSlices.Domain.Entity.ToString"/> implementation, aside of a <see cref="M:VSlices.Domain.Entity`1.GetKeys"/> and an <see cref="M:VSlices.Domain.Entity.EntityEquals(VSlices.Domain.IEntity)"/> method</remarks>
        </member>
        <member name="P:VSlices.Domain.Entity`1.Id">
            <summary>
            The key of the entity
            </summary>
        </member>
        <member name="M:VSlices.Domain.Entity`1.#ctor">
            <summary>
            Empty constructor to use in serialization scenarios
            </summary>
            <remarks>Do not use this constructor in your code, if is not for serialization</remarks>
        </member>
        <member name="M:VSlices.Domain.Entity`1.#ctor(`0)">
            <summary>
            Creates a new entity with the specified key
            </summary>
            <param name="id">The key of the entity</param>
        </member>
        <member name="M:VSlices.Domain.Entity`1.GetKeys">
            <inheritdoc/>
        </member>
        <member name="T:VSlices.Domain.ValueObject">
            <summary>
            Base class for value objects
            </summary>
            <remarks> Provides a <see cref="M:VSlices.Domain.ValueObject.ValueEquals(System.Object)"/> method</remarks>
        </member>
        <member name="M:VSlices.Domain.ValueObject.GetAtomicValues">
            <summary>
            Gets the values of the value object
            </summary>
            <remarks>Use <code>yield return val;</code></remarks>
            <returns>A enumeration of the properties</returns>
        </member>
        <member name="M:VSlices.Domain.ValueObject.ValueEquals(System.Object)">
            <summary>
            Performs a value check between two value objects
            </summary>
            <param name="obj">The other value object to compare with</param>
            <returns>true if has the same values, false if not</returns>
        </member>
    </members>
</doc>
