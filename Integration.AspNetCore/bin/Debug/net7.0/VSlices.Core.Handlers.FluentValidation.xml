<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VSlices.Core.Handlers.FluentValidation</name>
    </assembly>
    <members>
        <member name="T:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedCreateHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand`1"/> that validate entities with Fluent Validation, before create them
            </summary>
            <remarks>Useful to implement always valid entities</remarks>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
            <typeparam name="TEntity">The entity to create</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedCreateHandler`3.#ctor(FluentValidation.IValidator{`2},VSlices.Core.DataAccess.Abstracts.ICreateRepository{`2})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.ICreateRepository`1"/>
            </summary>
            <param name="entityValidator">Validator of the entity</param>
            <param name="repository">Repository with create function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedCreateHandler`3.ValidateEntityAsync(`2,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedCreateHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand"/> that validates entities with Fluent Validation, before create them
            </summary>
            <remarks>Useful in commands without response and to implement always-valid entities</remarks>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TEntity">The entity to create</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedCreateHandler`2.#ctor(FluentValidation.IValidator{`1},VSlices.Core.DataAccess.Abstracts.ICreateRepository{`1})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.ICreateRepository`1"/>
            </summary>
            <param name="entityValidator">Validator of the entity</param>
            <param name="repository">Repository with create function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedCreateHandler`2.ValidateEntityAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedRemoveHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand`1"/> that validate entities with Fluent Validation, before remove them
            </summary>
            <remarks>Useful to implement always valid entities</remarks>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
            <typeparam name="TEntity">The entity to remove</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedRemoveHandler`3.#ctor(FluentValidation.IValidator{`2},VSlices.Core.DataAccess.Abstracts.IRemoveRepository{`2})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IRemoveRepository`1"/>
            </summary>
            <param name="entityValidator">Validator of the entity</param>
            <param name="repository">Repository with remove function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedRemoveHandler`3.ValidateEntityAsync(`2,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedRemoveHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand"/> that validates entities with Fluent Validation, before remove them
            </summary>
            <remarks>Useful in commands without response and to implement always-valid entities</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TEntity">The entity to remove</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedRemoveHandler`2.#ctor(FluentValidation.IValidator{`1},VSlices.Core.DataAccess.Abstracts.IRemoveRepository{`1})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IRemoveRepository`1"/>
            </summary>
            <param name="entityValidator">Validator of the entity</param>
            <param name="repository">Repository with remove function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedRemoveHandler`2.ValidateEntityAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedUpdateHandler`3">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand`1"/> that validates entities with Fluent Validation, before update them
            </summary>
            <remarks>Useful to implement always valid entities</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TResponse">The expected response</typeparam>
            <typeparam name="TEntity">The entity to update</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedUpdateHandler`3.#ctor(FluentValidation.IValidator{`2},VSlices.Core.DataAccess.Abstracts.IUpdateRepository{`2})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IUpdateRepository`1"/>
            </summary>
            <param name="entityValidator">Validator of the entity</param>
            <param name="repository">Repository with update function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedUpdateHandler`3.ValidateEntityAsync(`2,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedUpdateHandler`2">
            <summary>
            Base class for handlers of <see cref="T:VSlices.Core.Abstracts.Requests.ICommand"/> that validates entities with Fluent Validation, before update them
            </summary>
            <remarks>Useful in commands without response and to implement always-valid entities</remarks>
            <typeparam name="TRequest">The command to handle</typeparam>
            <typeparam name="TEntity">The entity to update</typeparam>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedUpdateHandler`2.#ctor(FluentValidation.IValidator{`1},VSlices.Core.DataAccess.Abstracts.IUpdateRepository{`1})">
            <summary>
            Creates a new instance using the given <see cref="T:VSlices.Core.DataAccess.Abstracts.IUpdateRepository`1"/>
            </summary>
            <param name="entityValidator">Validator of the entity</param>
            <param name="repository">Repository with update function</param>
        </member>
        <member name="M:VSlices.Core.Handlers.FluentValidation.EntityFluentValidatedUpdateHandler`2.ValidateEntityAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
    </members>
</doc>
